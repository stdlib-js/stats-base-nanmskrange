{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/accessors.js","../lib/nanmskrange.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the range of a strided array according to a mask, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {NumericArray} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @param {NonNegativeInteger} offsetMask - `mask` starting index\n* @returns {number} range\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var mask = [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 ];\n* var N = floor( x.length / 2 );\n*\n* var v = nanmskrange( N, x, 2, 1, mask, 2, 1 );\n* // returns 6.0\n*/\nfunction nanmskrange( N, x, strideX, offsetX, mask, strideMask, offsetMask ) {\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar im;\n\tvar ox;\n\tvar om;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tox = arraylike2object( x );\n\tom = arraylike2object( mask );\n\tif ( ox.accessorProtocol || om.accessorProtocol ) {\n\t\treturn accessors( N, ox, strideX, offsetX, om, strideMask, offsetMask );\n\t}\n\tix = offsetX;\n\tim = offsetMask;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v && mask[ im ] === 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t\tim += strideMask;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmin = v;\n\tmax = min;\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tim += strideMask;\n\t\tif ( mask[ im ] ) {\n\t\t\tcontinue;\n\t\t}\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max - min;\n}\n\n\n// EXPORTS //\n\nexport default nanmskrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the range of a strided array according to a mask, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array element\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Object} mask - mask array object\n* @param {Collection} mask.data - mask array element\n* @param {Array<Function>} mask.accessors - mask array element accessors\n* @param {integer} strideMask - stride length `mask`\n* @param {NonNegativeInteger} offsetMask - starting index `mask`\n* @returns {number} range\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var mask = toAccessorArray( [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 ] );\n*\n* var v = nanmskrange( 5, arraylike2object( x ), 2, 1, arraylike2object( mask ), 2, 1 );\n* // returns 6.0\n*/\nfunction nanmskrange( N, x, strideX, offsetX, mask, strideMask, offsetMask ) {\n\tvar xbuf;\n\tvar mbuf;\n\tvar mget;\n\tvar xget;\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar im;\n\tvar v;\n\tvar i;\n\n\t// Cache references to array data:\n\txbuf = x.data;\n\tmbuf = mask.data;\n\n\t// Cache references to element accessors:\n\txget = x.accessors[ 0 ];\n\tmget = mask.accessors[ 0 ];\n\n\tix = offsetX;\n\tim = offsetMask;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = xget( xbuf, ix );\n\t\tif ( v === v && mget( mbuf, im ) === 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t\tim += strideMask;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmin = v;\n\tmax = min;\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tim += strideMask;\n\t\tif ( mget( mbuf, im ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tv = xget( xbuf, ix );\n\t\tif ( isnan( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max - min;\n}\n\n\n// EXPORTS //\n\nexport default nanmskrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the range of a strided array according to a mask, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @returns {number} range\n*\n* @example\n* var x = [ 1.0, -2.0, 4.0, 2.0, NaN ];\n* var mask = [ 0, 0, 1, 0, 0 ];\n*\n* var v = nanmskrange( x.length, x, 1, mask, 1 );\n* // returns 4.0\n*/\nfunction nanmskrange( N, x, strideX, mask, strideMask ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar im = stride2offset( N, strideMask);\n\treturn ndarray( N, x, strideX, ix, mask, strideMask, im );\n}\n\n\n// EXPORTS //\n\nexport default nanmskrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport nanmskrange from './nanmskrange.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( nanmskrange, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default nanmskrange;\n"],"names":["nanmskrange","N","x","strideX","offsetX","mask","strideMask","offsetMask","max","min","ix","im","ox","om","v","i","NaN","arraylike2object","accessorProtocol","xbuf","mbuf","mget","xget","data","accessors","isnan","ndarray","stride2offset","setReadOnly"],"mappings":";;qaAmDA,SAASA,EAAaC,EAAGC,EAAGC,EAASC,EAASC,EAAMC,EAAYC,GAC/D,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKd,GAAK,EACT,OAAOe,IAIR,GAFAJ,EAAKK,EAAkBf,GACvBW,EAAKI,EAAkBZ,GAClBO,EAAGM,kBAAoBL,EAAGK,iBAC9B,OCdF,SAAsBjB,EAAGC,EAAGC,EAASC,EAASC,EAAMC,EAAYC,GAC/D,IAAIY,EACAC,EACAC,EACAC,EACAd,EACAC,EACAC,EACAC,EACAG,EACAC,EAYJ,IATAI,EAAOjB,EAAEqB,KACTH,EAAOf,EAAKkB,KAGZD,EAAOpB,EAAEsB,UAAW,GACpBH,EAAOhB,EAAKmB,UAAW,GAEvBd,EAAKN,EACLO,EAAKJ,EACCQ,EAAI,EAAGA,EAAId,KAChBa,EAAIQ,EAAMH,EAAMT,KACLI,GAA0B,IAArBO,EAAMD,EAAMT,IAFTI,IAKnBL,GAAMP,EACNQ,GAAML,EAEP,GAAKS,IAAMd,EACV,OAAOe,IAKR,IAFAR,EADAC,EAAMK,EAENC,GAAK,EACIA,EAAId,EAAGc,IACfL,GAAMP,EAEDkB,EAAMD,EADXT,GAAML,KAINQ,EAAIQ,EAAMH,EAAMT,GACXe,EAAOX,KAGPA,EAAIL,EACRA,EAAMK,EACKA,EAAIN,IACfA,EAAMM,KAGR,OAAON,EAAMC,CACd,CDvCSe,CAAWvB,EAAGW,EAAIT,EAASC,EAASS,EAAIP,EAAYC,GAI5D,IAFAG,EAAKN,EACLO,EAAKJ,EACCQ,EAAI,EAAGA,EAAId,KAChBa,EAAIZ,EAAGQ,KACII,GAAoB,IAAfT,EAAMM,IAFHI,IAKnBL,GAAMP,EACNQ,GAAML,EAEP,GAAKS,IAAMd,EACV,OAAOe,IAKR,IAFAR,EADAC,EAAMK,EAENC,GAAK,EACIA,EAAId,EAAGc,IACfL,GAAMP,EAEDE,EADLM,GAAML,KAINQ,EAAIZ,EAAGQ,GACFe,EAAOX,KAGPA,EAAIL,EACRA,EAAMK,EACKA,EAAIN,IACfA,EAAMM,KAGR,OAAON,EAAMC,CACd,CEzDA,SAAST,EAAaC,EAAGC,EAAGC,EAASE,EAAMC,GAG1C,OAAOoB,EAASzB,EAAGC,EAAGC,EAFbwB,EAAe1B,EAAGE,GAEQE,EAAMC,EADhCqB,EAAe1B,EAAGK,GAE5B,CCpBAsB,EAAA5B,EAAA,UAAA0B"}