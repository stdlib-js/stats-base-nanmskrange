{
  "version": 3,
  "sources": ["../lib/nanmskrange.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\n\n\n// MAIN //\n\n/**\n* Computes the range of a strided array according to a mask, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @returns {number} range\n*\n* @example\n* var x = [ 1.0, -2.0, 4.0, 2.0, NaN ];\n* var mask = [ 0, 0, 1, 0, 0 ];\n*\n* var v = nanmskrange( x.length, x, 1, mask, 1 );\n* // returns 4.0\n*/\nfunction nanmskrange( N, x, strideX, mask, strideMask ) {\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar im;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideMask < 0 ) {\n\t\tim = (1-N) * strideMask;\n\t} else {\n\t\tim = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v && mask[ im ] === 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t\tim += strideMask;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmin = v;\n\tmax = min;\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tim += strideMask;\n\t\tif ( mask[ im ] ) {\n\t\t\tcontinue;\n\t\t}\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max - min;\n}\n\n\n// EXPORTS //\n\nmodule.exports = nanmskrange;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\n\n\n// MAIN //\n\n/**\n* Computes the range of a strided array according to a mask, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {NumericArray} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @param {NonNegativeInteger} offsetMask - `mask` starting index\n* @returns {number} range\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var mask = [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 ];\n* var N = floor( x.length / 2 );\n*\n* var v = nanmskrange( N, x, 2, 1, mask, 2, 1 );\n* // returns 6.0\n*/\nfunction nanmskrange( N, x, strideX, offsetX, mask, strideMask, offsetMask ) {\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar im;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tix = offsetX;\n\tim = offsetMask;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v && mask[ im ] === 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t\tim += strideMask;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmin = v;\n\tmax = min;\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tim += strideMask;\n\t\tif ( mask[ im ] ) {\n\t\t\tcontinue;\n\t\t}\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max - min;\n}\n\n\n// EXPORTS //\n\nmodule.exports = nanmskrange;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar nanmskrange = require( './nanmskrange.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( nanmskrange, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = nanmskrange;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the range of a strided array according to a mask, ignoring `NaN` values.\n*\n* @module @stdlib/stats-base-nanmskrange\n*\n* @example\n* var nanmskrange = require( '@stdlib/stats-base-nanmskrange' );\n*\n* var x = [ 1.0, -2.0, 4.0, 2.0, NaN ];\n* var mask = [ 0, 0, 1, 0, 0 ];\n*\n* var v = nanmskrange( x.length, x, 1 );\n* // returns 4.0\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var nanmskrange = require( '@stdlib/stats-base-nanmskrange' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var mask = [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 ];\n* var N = floor( x.length / 2 );\n*\n* var v = nanmskrange.ndarray( N, x, 2, 1, mask, 2, 1 );\n* // returns 6.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EAsBvD,SAASC,EAAaC,EAAGC,EAAGC,EAASC,EAAMC,EAAa,CACvD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,MAAO,KAYR,IAVKE,EAAU,EACdK,GAAM,EAAEP,GAAKE,EAEbK,EAAK,EAEDH,EAAa,EACjBI,GAAM,EAAER,GAAKI,EAEbI,EAAK,EAEAE,EAAI,EAAGA,EAAIV,IAChBS,EAAIR,EAAGM,CAAG,EACL,EAAAE,IAAMA,GAAKN,EAAMK,CAAG,IAAM,IAFZE,IAKnBH,GAAML,EACNM,GAAMJ,EAEP,GAAKM,IAAMV,EACV,MAAO,KAKR,IAHAM,EAAMG,EACNJ,EAAMC,EACNI,GAAK,EACCA,EAAGA,EAAIV,EAAGU,IACfH,GAAML,EACNM,GAAMJ,EACD,CAAAD,EAAMK,CAAG,IAGdC,EAAIR,EAAGM,CAAG,EACL,CAAAT,EAAOW,CAAE,IAGTA,EAAIH,EACRA,EAAMG,EACKA,EAAIJ,IACfA,EAAMI,KAGR,OAAOJ,EAAMC,CACd,CAKAT,EAAO,QAAUE,ICrGjB,IAAAY,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EA2BvD,SAASC,EAAaC,EAAGC,EAAGC,EAASC,EAASC,EAAMC,EAAYC,EAAa,CAC5E,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKZ,GAAK,EACT,MAAO,KAIR,IAFAS,EAAKN,EACLO,EAAKJ,EACCM,EAAI,EAAGA,EAAIZ,IAChBW,EAAIV,EAAGQ,CAAG,EACL,EAAAE,IAAMA,GAAKP,EAAMM,CAAG,IAAM,IAFZE,IAKnBH,GAAMP,EACNQ,GAAML,EAEP,GAAKO,IAAMZ,EACV,MAAO,KAKR,IAHAQ,EAAMG,EACNJ,EAAMC,EACNI,GAAK,EACCA,EAAGA,EAAIZ,EAAGY,IACfH,GAAMP,EACNQ,GAAML,EACD,CAAAD,EAAMM,CAAG,IAGdC,EAAIV,EAAGQ,CAAG,EACL,CAAAX,EAAOa,CAAE,IAGTA,EAAIH,EACRA,EAAMG,EACKA,EAAIJ,IACfA,EAAMI,KAGR,OAAOJ,EAAMC,CACd,CAKAX,EAAO,QAAUE,IClGjB,IAAAc,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAc,IACdC,EAAU,IAKdF,EAAaC,EAAa,UAAWC,CAAQ,EAK7CH,EAAO,QAAUE,ICcjB,IAAIE,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_nanmskrange", "__commonJSMin", "exports", "module", "isnan", "nanmskrange", "N", "x", "strideX", "mask", "strideMask", "max", "min", "ix", "im", "v", "i", "require_ndarray", "__commonJSMin", "exports", "module", "isnan", "nanmskrange", "N", "x", "strideX", "offsetX", "mask", "strideMask", "offsetMask", "max", "min", "ix", "im", "v", "i", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "nanmskrange", "ndarray", "main"]
}
