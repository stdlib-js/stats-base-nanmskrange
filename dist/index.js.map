{
  "version": 3,
  "sources": ["../lib/accessors.js", "../lib/ndarray.js", "../lib/nanmskrange.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\n\n\n// MAIN //\n\n/**\n* Computes the range of a strided array according to a mask, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array element\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Object} mask - mask array object\n* @param {Collection} mask.data - mask array element\n* @param {Array<Function>} mask.accessors - mask array element accessors\n* @param {integer} strideMask - stride length `mask`\n* @param {NonNegativeInteger} offsetMask - starting index `mask`\n* @returns {number} range\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var mask = toAccessorArray( [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 ] );\n*\n* var v = nanmskrange( 5, arraylike2object( x ), 2, 1, arraylike2object( mask ), 2, 1 );\n* // returns 6.0\n*/\nfunction nanmskrange( N, x, strideX, offsetX, mask, strideMask, offsetMask ) {\n\tvar xbuf;\n\tvar mbuf;\n\tvar mget;\n\tvar xget;\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar im;\n\tvar v;\n\tvar i;\n\n\t// Cache references to array data:\n\txbuf = x.data;\n\tmbuf = mask.data;\n\n\t// Cache references to element accessors:\n\txget = x.accessors[ 0 ];\n\tmget = mask.accessors[ 0 ];\n\n\tix = offsetX;\n\tim = offsetMask;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = xget( xbuf, ix );\n\t\tif ( v === v && mget( mbuf, im ) === 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t\tim += strideMask;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmin = v;\n\tmax = min;\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tim += strideMask;\n\t\tif ( mget( mbuf, im ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tv = xget( xbuf, ix );\n\t\tif ( isnan( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max - min;\n}\n\n\n// EXPORTS //\n\nmodule.exports = nanmskrange;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar accessors = require( './accessors.js' );\n\n\n// MAIN //\n\n/**\n* Computes the range of a strided array according to a mask, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {NumericArray} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @param {NonNegativeInteger} offsetMask - `mask` starting index\n* @returns {number} range\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var mask = [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 ];\n* var N = floor( x.length / 2 );\n*\n* var v = nanmskrange( N, x, 2, 1, mask, 2, 1 );\n* // returns 6.0\n*/\nfunction nanmskrange( N, x, strideX, offsetX, mask, strideMask, offsetMask ) {\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar im;\n\tvar ox;\n\tvar om;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tox = arraylike2object( x );\n\tom = arraylike2object( mask );\n\tif ( ox.accessorProtocol || om.accessorProtocol ) {\n\t\treturn accessors( N, ox, strideX, offsetX, om, strideMask, offsetMask );\n\t}\n\tix = offsetX;\n\tim = offsetMask;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v && mask[ im ] === 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t\tim += strideMask;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmin = v;\n\tmax = min;\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tim += strideMask;\n\t\tif ( mask[ im ] ) {\n\t\t\tcontinue;\n\t\t}\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max - min;\n}\n\n\n// EXPORTS //\n\nmodule.exports = nanmskrange;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the range of a strided array according to a mask, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @returns {number} range\n*\n* @example\n* var x = [ 1.0, -2.0, 4.0, 2.0, NaN ];\n* var mask = [ 0, 0, 1, 0, 0 ];\n*\n* var v = nanmskrange( x.length, x, 1, mask, 1 );\n* // returns 4.0\n*/\nfunction nanmskrange( N, x, strideX, mask, strideMask ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar im = stride2offset( N, strideMask);\n\treturn ndarray( N, x, strideX, ix, mask, strideMask, im );\n}\n\n\n// EXPORTS //\n\nmodule.exports = nanmskrange;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar nanmskrange = require( './nanmskrange.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( nanmskrange, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = nanmskrange;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the range of a strided array according to a mask, ignoring `NaN` values.\n*\n* @module @stdlib/stats-base-nanmskrange\n*\n* @example\n* var nanmskrange = require( '@stdlib/stats-base-nanmskrange' );\n*\n* var x = [ 1.0, -2.0, 4.0, 2.0, NaN ];\n* var mask = [ 0, 0, 1, 0, 0 ];\n*\n* var v = nanmskrange( x.length, x, 1 );\n* // returns 4.0\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var nanmskrange = require( '@stdlib/stats-base-nanmskrange' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var mask = [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 ];\n* var N = floor( x.length / 2 );\n*\n* var v = nanmskrange.ndarray( N, x, 2, 1, mask, 2, 1 );\n* // returns 6.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EA+BvD,SAASC,EAAaC,EAAGC,EAAGC,EAASC,EAASC,EAAMC,EAAYC,EAAa,CAC5E,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAYJ,IATAT,EAAON,EAAE,KACTO,EAAOJ,EAAK,KAGZM,EAAOT,EAAE,UAAW,CAAE,EACtBQ,EAAOL,EAAK,UAAW,CAAE,EAEzBS,EAAKV,EACLW,EAAKR,EACCU,EAAI,EAAGA,EAAIhB,IAChBe,EAAIL,EAAMH,EAAMM,CAAG,EACd,EAAAE,IAAMA,GAAKN,EAAMD,EAAMM,CAAG,IAAM,IAFlBE,IAKnBH,GAAMX,EACNY,GAAMT,EAEP,GAAKW,IAAMhB,EACV,MAAO,KAKR,IAHAY,EAAMG,EACNJ,EAAMC,EACNI,GAAK,EACCA,EAAGA,EAAIhB,EAAGgB,IACfH,GAAMX,EACNY,GAAMT,EACD,CAAAI,EAAMD,EAAMM,CAAG,IAGpBC,EAAIL,EAAMH,EAAMM,CAAG,EACd,CAAAf,EAAOiB,CAAE,IAGTA,EAAIH,EACRA,EAAMG,EACKA,EAAIJ,IACfA,EAAMI,KAGR,OAAOJ,EAAMC,CACd,CAKAf,EAAO,QAAUE,IC/GjB,IAAAkB,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,EAAmB,QAAS,qCAAsC,EAClEC,EAAY,IA2BhB,SAASC,EAAaC,EAAGC,EAAGC,EAASC,EAASC,EAAMC,EAAYC,EAAa,CAC5E,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKd,GAAK,EACT,MAAO,KAIR,GAFAW,EAAKd,EAAkBI,CAAE,EACzBW,EAAKf,EAAkBO,CAAK,EACvBO,EAAG,kBAAoBC,EAAG,iBAC9B,OAAOd,EAAWE,EAAGW,EAAIT,EAASC,EAASS,EAAIP,EAAYC,CAAW,EAIvE,IAFAG,EAAKN,EACLO,EAAKJ,EACCQ,EAAI,EAAGA,EAAId,IAChBa,EAAIZ,EAAGQ,CAAG,EACL,EAAAI,IAAMA,GAAKT,EAAMM,CAAG,IAAM,IAFZI,IAKnBL,GAAMP,EACNQ,GAAML,EAEP,GAAKS,IAAMd,EACV,MAAO,KAKR,IAHAQ,EAAMK,EACNN,EAAMC,EACNM,GAAK,EACCA,EAAGA,EAAId,EAAGc,IACfL,GAAMP,EACNQ,GAAML,EACD,CAAAD,EAAMM,CAAG,IAGdG,EAAIZ,EAAGQ,CAAG,EACL,CAAAb,EAAOiB,CAAE,IAGTA,EAAIL,EACRA,EAAMK,EACKA,EAAIN,IACfA,EAAMM,KAGR,OAAON,EAAMC,CACd,CAKAb,EAAO,QAAUI,IC3GjB,IAAAgB,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAU,IAsBd,SAASC,EAAaC,EAAGC,EAAGC,EAASC,EAAMC,EAAa,CACvD,IAAIC,EAAKR,EAAeG,EAAGE,CAAQ,EAC/BI,EAAKT,EAAeG,EAAGI,CAAU,EACrC,OAAON,EAASE,EAAGC,EAAGC,EAASG,EAAIF,EAAMC,EAAYE,CAAG,CACzD,CAKAV,EAAO,QAAUG,ICtDjB,IAAAQ,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAc,IACdC,EAAU,IAKdF,EAAaC,EAAa,UAAWC,CAAQ,EAK7CH,EAAO,QAAUE,ICcjB,IAAIE,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_accessors", "__commonJSMin", "exports", "module", "isnan", "nanmskrange", "N", "x", "strideX", "offsetX", "mask", "strideMask", "offsetMask", "xbuf", "mbuf", "mget", "xget", "max", "min", "ix", "im", "v", "i", "require_ndarray", "__commonJSMin", "exports", "module", "isnan", "arraylike2object", "accessors", "nanmskrange", "N", "x", "strideX", "offsetX", "mask", "strideMask", "offsetMask", "max", "min", "ix", "im", "ox", "om", "v", "i", "require_nanmskrange", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "nanmskrange", "N", "x", "strideX", "mask", "strideMask", "ix", "im", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "nanmskrange", "ndarray", "main"]
}
